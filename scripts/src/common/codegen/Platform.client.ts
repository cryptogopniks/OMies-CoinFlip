/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.9.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Uint128, Decimal, InstantiateMsg, Range, ExecuteMsg, Side, QueryMsg, MigrateMsg, SignedDecimal, Int256, AppInfo, Revenue, Stats, StatsItem, Addr, Config, UserInfo, ArrayOfUserListRespItem, UserListRespItem } from "./Platform.types";
export interface PlatformReadOnlyInterface {
  contractAddress: string;
  config: () => Promise<Config>;
  appInfo: () => Promise<AppInfo>;
  requiredToDeposit: () => Promise<Uint128>;
  availableToWithdraw: () => Promise<Uint128>;
  user: ({
    address
  }: {
    address: string;
  }) => Promise<UserInfo>;
  userList: ({
    amount,
    startAfter
  }: {
    amount: number;
    startAfter?: string;
  }) => Promise<ArrayOfUserListRespItem>;
}
export class PlatformQueryClient implements PlatformReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.config = this.config.bind(this);
    this.appInfo = this.appInfo.bind(this);
    this.requiredToDeposit = this.requiredToDeposit.bind(this);
    this.availableToWithdraw = this.availableToWithdraw.bind(this);
    this.user = this.user.bind(this);
    this.userList = this.userList.bind(this);
  }
  config = async (): Promise<Config> => {
    return this.client.queryContractSmart(this.contractAddress, {
      config: {}
    });
  };
  appInfo = async (): Promise<AppInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      app_info: {}
    });
  };
  requiredToDeposit = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      required_to_deposit: {}
    });
  };
  availableToWithdraw = async (): Promise<Uint128> => {
    return this.client.queryContractSmart(this.contractAddress, {
      available_to_withdraw: {}
    });
  };
  user = async ({
    address
  }: {
    address: string;
  }): Promise<UserInfo> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user: {
        address
      }
    });
  };
  userList = async ({
    amount,
    startAfter
  }: {
    amount: number;
    startAfter?: string;
  }): Promise<ArrayOfUserListRespItem> => {
    return this.client.queryContractSmart(this.contractAddress, {
      user_list: {
        amount,
        start_after: startAfter
      }
    });
  };
}
export interface PlatformInterface extends PlatformReadOnlyInterface {
  contractAddress: string;
  sender: string;
  flip: ({
    side
  }: {
    side: Side;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  claim: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  acceptAdminRole: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  deposit: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  withdraw: ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  updateConfig: ({
    admin,
    bet,
    platformFee,
    worker
  }: {
    admin?: string;
    bet?: Range;
    platformFee?: Decimal;
    worker?: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  pause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unpause: (fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class PlatformClient extends PlatformQueryClient implements PlatformInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.flip = this.flip.bind(this);
    this.claim = this.claim.bind(this);
    this.acceptAdminRole = this.acceptAdminRole.bind(this);
    this.deposit = this.deposit.bind(this);
    this.withdraw = this.withdraw.bind(this);
    this.updateConfig = this.updateConfig.bind(this);
    this.pause = this.pause.bind(this);
    this.unpause = this.unpause.bind(this);
  }
  flip = async ({
    side
  }: {
    side: Side;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      flip: {
        side
      }
    }, fee, memo, _funds);
  };
  claim = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      claim: {}
    }, fee, memo, _funds);
  };
  acceptAdminRole = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      accept_admin_role: {}
    }, fee, memo, _funds);
  };
  deposit = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      deposit: {}
    }, fee, memo, _funds);
  };
  withdraw = async ({
    amount,
    recipient
  }: {
    amount: Uint128;
    recipient?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      withdraw: {
        amount,
        recipient
      }
    }, fee, memo, _funds);
  };
  updateConfig = async ({
    admin,
    bet,
    platformFee,
    worker
  }: {
    admin?: string;
    bet?: Range;
    platformFee?: Decimal;
    worker?: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_config: {
        admin,
        bet,
        platform_fee: platformFee,
        worker
      }
    }, fee, memo, _funds);
  };
  pause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      pause: {}
    }, fee, memo, _funds);
  };
  unpause = async (fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unpause: {}
    }, fee, memo, _funds);
  };
}